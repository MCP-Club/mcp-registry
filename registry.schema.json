{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MCP Registry Schema",
  "description": "Schema for MCP server type registry",
  "type": "object",
  "patternProperties": {
    "^[a-zA-Z0-9_-]+$": {
      "type": "object",
      "required": ["type", "description", "name", "id", "title"],
      "properties": {
        "name": {
          "type": "string",
          "description": "Display name of the MCP server"
        },
        "id": {
          "type": "string",
          "description": "Unique identifier for the MCP server"
        },
        "title": {
          "type": "string",
          "description": "Display title of the MCP server"
        },
        "description": {
          "type": "string",
          "description": "Detailed description of what this server type does"
        },
        "tags": {
          "type": "array",
          "description": "List of tags describing the server's capabilities",
          "items": {
            "type": "string"
          }
        },
        "creator": {
          "type": "string",
          "description": "Creator or organization that developed this MCP"
        },
        "logoUrl": {
          "type": "string",
          "description": "URL to the server's logo image",
          "format": "uri"
        },
        "publishDate": {
          "type": "string",
          "description": "Date when this MCP was published",
          "format": "date-time"
        },
        "rating": {
          "type": "number",
          "description": "Rating score for this MCP",
          "minimum": 0,
          "maximum": 5
        },
        "version": {
          "type": "string",
          "description": "Version of the MCP server",
          "default": "latest"
        },
        "homepage": {
          "type": "string",
          "description": "URL to the MCP's homepage or documentation",
          "format": "uri"
        },
        "type": {
          "type": "string",
          "enum": ["sse", "stdio"],
          "description": "Communication protocol type"
        },
        "endpoint": {
          "type": "string",
          "description": "Endpoint for SSE connection, required if type is sse"
        },
        "commandInfo": {
          "type": "object",
          "description": "Command execution information",
          "properties": {
            "command": {
              "type": "string",
              "description": "Base command to start the server"
            },
            "args": {
              "type": "array",
              "description": "Base arguments before parameters",
              "items": {
                "type": "string"
              }
            },
            "env": {
              "type": "object",
              "description": "Environment variables required by the server",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "required": ["command", "args"]
        },
        "parameters": {
          "type": "object",
          "description": "Parameter definitions for this server type, only needed for local servers",
          "patternProperties": {
            "^[a-zA-Z0-9_-]+$": {
              "type": "object",
              "required": ["type", "required", "argTemplate", "description"],
              "properties": {
                "description": {
                  "type": "string",
                  "description": "Detailed description of what this parameter does"
                },
                "type": {
                  "type": "string",
                  "enum": ["string", "integer", "boolean", "array"],
                  "description": "Parameter type"
                },
                "required": {
                  "type": "boolean",
                  "description": "Whether this parameter is required"
                },
                "default": {
                  "description": "Default value if not specified"
                },
                "argTemplate": {
                  "type": "string",
                  "description": "Template for converting parameter to command line arg. Use {value} as placeholder"
                }
              }
            }
          }
        }
      },
      "allOf": [
        {
          "if": {
            "properties": { "type": { "const": "sse" } }
          },
          "then": {
            "required": ["endpoint"]
          }
        },
        {
          "if": {
            "properties": { "type": { "const": "stdio" } }
          },
          "then": {
            "required": ["commandInfo", "parameters"]
          }
        },
        {
          "if": {
            "allOf": [
              { "properties": { "type": { "const": "sse" } } },
              { "required": ["commandInfo"] }
            ]
          },
          "then": {
            "required": ["parameters"]
          }
        }
      ]
    }
  }
}
